/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package edu.upc.freeling;

public class TreeDepnode {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected TreeDepnode(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TreeDepnode obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        freelingJNI.delete_TreeDepnode(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setInfo(Depnode value) {
    freelingJNI.TreeDepnode_info_set(swigCPtr, this, Depnode.getCPtr(value), value);
  }

  public Depnode getInfo() {
    long cPtr = freelingJNI.TreeDepnode_info_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Depnode(cPtr, false);
  }

  public TreeDepnode() {
    this(freelingJNI.new_TreeDepnode__SWIG_0(), true);
  }

  public TreeDepnode(Depnode arg0) {
    this(freelingJNI.new_TreeDepnode__SWIG_1(Depnode.getCPtr(arg0), arg0), true);
  }

  public TreeDepnode(TreeDepnode arg0) {
    this(freelingJNI.new_TreeDepnode__SWIG_2(TreeDepnode.getCPtr(arg0), arg0), true);
  }

  public TreeDepnode(PreorderIteratorDepnode arg0) {
    this(freelingJNI.new_TreeDepnode__SWIG_3(PreorderIteratorDepnode.getCPtr(arg0), arg0), true);
  }

  public TreeDepnode operator_assignment(TreeDepnode arg0) {
    return new TreeDepnode(freelingJNI.TreeDepnode_operator_assignment(swigCPtr, this, TreeDepnode.getCPtr(arg0), arg0), false);
  }

  public long numChildren() {
    return freelingJNI.TreeDepnode_numChildren(swigCPtr, this);
  }

  public SiblingIteratorDepnode nthChild(long arg0) {
    return new SiblingIteratorDepnode(freelingJNI.TreeDepnode_nthChild(swigCPtr, this, arg0), true);
  }

  public PreorderIteratorDepnode getParent() {
    return new PreorderIteratorDepnode(freelingJNI.TreeDepnode_getParent(swigCPtr, this), true);
  }

  public TreeDepnode nthChildRef(long arg0) {
    return new TreeDepnode(freelingJNI.TreeDepnode_nthChildRef(swigCPtr, this, arg0), false);
  }

  public Depnode getInformation() {
    return new Depnode(freelingJNI.TreeDepnode_getInformation(swigCPtr, this), false);
  }

  public void appendChild(TreeDepnode arg0) {
    freelingJNI.TreeDepnode_appendChild(swigCPtr, this, TreeDepnode.getCPtr(arg0), arg0);
  }

  public void hangChild(TreeDepnode arg0, boolean arg1) {
    freelingJNI.TreeDepnode_hangChild__SWIG_0(swigCPtr, this, TreeDepnode.getCPtr(arg0), arg0, arg1);
  }

  public void hangChild(TreeDepnode arg0) {
    freelingJNI.TreeDepnode_hangChild__SWIG_1(swigCPtr, this, TreeDepnode.getCPtr(arg0), arg0);
  }

  public void clear() {
    freelingJNI.TreeDepnode_clear(swigCPtr, this);
  }

  public boolean empty() {
    return freelingJNI.TreeDepnode_empty(swigCPtr, this);
  }

  public SiblingIteratorDepnode siblingBegin() {
    return new SiblingIteratorDepnode(freelingJNI.TreeDepnode_siblingBegin(swigCPtr, this), true);
  }

  public SiblingIteratorDepnode siblingEnd() {
    return new SiblingIteratorDepnode(freelingJNI.TreeDepnode_siblingEnd(swigCPtr, this), true);
  }

  public SiblingIteratorDepnode siblingRbegin() {
    return new SiblingIteratorDepnode(freelingJNI.TreeDepnode_siblingRbegin(swigCPtr, this), true);
  }

  public SiblingIteratorDepnode siblingRend() {
    return new SiblingIteratorDepnode(freelingJNI.TreeDepnode_siblingRend(swigCPtr, this), true);
  }

  public PreorderIteratorDepnode begin() {
    return new PreorderIteratorDepnode(freelingJNI.TreeDepnode_begin(swigCPtr, this), true);
  }

  public PreorderIteratorDepnode end() {
    return new PreorderIteratorDepnode(freelingJNI.TreeDepnode_end(swigCPtr, this), true);
  }

}
